/*This function is run when a new game i started */
void OnInit()
{
//----SOUND INIT---------------------
	//FOTSTEPS
	PreloadSound("player_step_run_concrete.snt"); PreloadSound("player_step_walk_concrete.snt"); PreloadSound("player_step_sneak_concrete.snt");
	PreloadSound("player_step_run_dirt.snt"); PreloadSound("player_step_walk_dirt.snt"); PreloadSound("player_step_sneak_dirt.snt");
	PreloadSound("player_step_run_fabric.snt"); PreloadSound("player_step_walk_fabric.snt"); PreloadSound("player_step_sneak_fabric.snt");
	PreloadSound("player_step_run_generic_hard.snt"); PreloadSound("player_step_walk_generic_hard.snt"); PreloadSound("player_step_sneak_generic_hard.snt");
	PreloadSound("player_step_run_metal.snt"); PreloadSound("player_step_walk_metal.snt"); PreloadSound("player_step_sneak_metal.snt");
	PreloadSound("player_step_run_metal_loose.snt"); PreloadSound("player_step_walk_metal_loose.snt"); PreloadSound("player_step_sneak_metal_loose.snt");
	PreloadSound("player_step_run_ventilation.snt"); PreloadSound("player_step_walk_ventilation.snt"); PreloadSound("player_step_sneak_ventilation.snt");
	PreloadSound("player_step_run_wood.snt"); PreloadSound("player_step_walk_wood.snt"); PreloadSound("player_step_sneak_wood.snt");
	PreloadSound("player_step_run_wood_squeak.snt"); PreloadSound("player_step_walk_wood_squeak.snt"); PreloadSound("player_step_sneak_wood_squeak.snt");
	//PHYSICS IMPACTS
	PreloadSound("imp_book_high.snt"); PreloadSound("imp_book_med.snt"); PreloadSound("imp_book_low.snt");
	PreloadSound("imp_chair_wheel_high.snt"); PreloadSound("imp_chair_wheel_med.snt"); PreloadSound("imp_chair_wheel_low.snt");
	PreloadSound("imp_concrete_high.snt"); PreloadSound("imp_concrete_med.snt"); PreloadSound("imp_concrete_low.snt");
	PreloadSound("imp_fabric_high.snt"); PreloadSound("imp_fabric_med.snt"); PreloadSound("imp_fabric_low.snt");
	PreloadSound("imp_generic_hard_high.snt"); PreloadSound("imp_generic_hard_med.snt"); PreloadSound("imp_generic_hard_low.snt");
	PreloadSound("imp_glass_high.snt"); PreloadSound("imp_glass_low.snt"); PreloadSound("imp_glass_low.snt");
	PreloadSound("imp_metal_can_high.snt"); PreloadSound("imp_metal_can_med.snt"); PreloadSound("imp_metal_can_low.snt");
	PreloadSound("imp_metal_case_high.snt"); PreloadSound("imp_metal_case_med.snt"); PreloadSound("imp_metal_case_low.snt");
	PreloadSound("imp_metal_chair_high.snt"); PreloadSound("imp_metal_chair_med.snt"); PreloadSound("imp_metal_chair_low.snt");
	PreloadSound("imp_metal_high.snt"); PreloadSound("imp_metal_med.snt"); PreloadSound("imp_metal_low.snt");
	PreloadSound("imp_metal_pipe_high.snt"); PreloadSound("imp_metal_pipe_med.snt"); PreloadSound("imp_metal_pipe_low.snt");
	PreloadSound("imp_paper_box_h_high.snt"); PreloadSound("imp_paper_box_h_med.snt"); PreloadSound("imp_paper_box_h_low.snt");
	PreloadSound("imp_paper_box_high.snt"); PreloadSound("imp_paper_box_med.snt"); PreloadSound("imp_paper_box_low.snt");
	PreloadSound("imp_paper_high.snt"); PreloadSound("imp_paper_med.snt"); PreloadSound("imp_paper_low.snt");
	PreloadSound("imp_plastic_elec_high.snt"); PreloadSound("imp_plastic_elec_med.snt"); PreloadSound("imp_plastic_elec_low.snt");
	PreloadSound("imp_wood_high.snt"); PreloadSound("imp_wood_med.snt"); PreloadSound("imp_wood_low.snt");
	PreloadSound("imp_wood_box_high.snt"); PreloadSound("imp_wood_box_med.snt"); PreloadSound("imp_wood_box_low.snt");
	PreloadSound("imp_wood_chair_high.snt"); PreloadSound("imp_wood_chair_med.snt"); PreloadSound("imp_wood_chair_low.snt");
	PreloadSound("imp_wood_shelf_s_high.snt"); PreloadSound("imp_wood_shelf_s_med.snt"); PreloadSound("imp_wood_shelf_s_low.snt");
	//PHYSICS SCRAPES & ROLL
	PreloadSound("scrape_book.snt"); 
	PreloadSound("scrape_chair_wheel.snt");
	PreloadSound("scrape_concrete.snt");
	PreloadSound("scrape_fabric.snt"); 
	PreloadSound("scrape_generic_hard.snt"); 
	PreloadSound("scrape_glass.snt"); 
	PreloadSound("scrape_metal.snt"); 
	PreloadSound("scrape_metal_can.snt"); 
	PreloadSound("scrape_metal_case.snt");
	PreloadSound("scrape_metal_chair.snt");  
	PreloadSound("scrape_metal_pipe.snt"); 
	PreloadSound("scrape_paper.snt"); 
	PreloadSound("scrape_paper_box.snt"); 
	PreloadSound("scrape_paper_box_h.snt");
	PreloadSound("scrape_plastic_elec.snt"); 
	PreloadSound("scrape_wood.snt");
	PreloadSound("scrape_wood_box.snt");
	PreloadSound("scrape_wood_chair.snt");
	PreloadSound("scrape_wood_shelf_s.snt");
	
	
//----VARIABLES-------------------------------------
	//For level01_03_corridor01 ventilation system
	CreateGlobalVar("corridor01vent_crouch", 0);
	CreateGlobalVar("corridor02_stand", 0);
	
	//To check if office door level01_03_corridor01 is locked or not on the inside
	CreateGlobalVar("officeunlocked", 0);
	
	//For level01_05_corridor02/level01_06_workshop01 ventilation system & locked door
	CreateGlobalVar("corridor02_crouch", 0);
	CreateGlobalVar("corridor02_vent01", 0);
	CreateGlobalVar("workshopunlocked", 0);
	
	//To see if generator in level01_flor02 is running or not.
	CreateGlobalVar("BUcheck", 0);
	
	//To make save at specific map loads
	CreateGlobalVar("autoload", 0);
	
	//To iniate a noise insanity thang when on way back if player have cord.
	CreateGlobalVar("startnoise", 0);
	
	//Var for giving different tasks depending on how many bottles player got
	CreateGlobalVar("bottles", 0);
	
	//A var to display wide screen messages where player questions sanity.
	CreateGlobalVar("sanity", 2);
	
	
//----ITEMS-------------------------------------
	GiveItem("notebook","item_notebook.ent", -1);
	GiveItem("flashlight","item_flashlight.ent", -1);
	
	for(int i=0; i< 4; ++i)
		GiveItem("battery","item_battery.ent", -1);
	
//TESTING
	//for(int i=0; i< 7; ++i)
	//	GiveItem("flare01","item_flare.ent", -1);
	//for(int i=0; i< 7; ++i)
	//	GiveItem("dynamite01","item_dynamite.ent", -1);
	//GiveItem("idcard1","item_id_card01.ent", -1);
	//GiveItem("jaracid","item_chemjar_acid.ent", -1);
	//GiveItem("venttool","item_venttool.ent", -1);
	//GiveItem("keypart1","item_key01_part1.ent", -1);
	//GiveItem("keypart2","item_key01_part2.ent", -1);
	//GiveItem("chord","item_chord.ent",-1);
	//GiveItem("keywhole","item_key01_whole.ent",-1);
	//GiveItem("keywhole","item_key01_whole.ent",-1);
	//GiveItem("glowstick","item_glowstick.ent",-1);
}	

/*This function is run everytime a map is loaded for the first time*/
void OnMapStart()
{
	//Print(Translate("Dialog", "big_guy1"));
}

/*This function is run everytime a map is loaded */
void OnMapLoad()
{	
//---- GLOBAL COMBOS-------------------
	//bottles for locked locker level01_02_entrance
	AddCombineCallback("jarliquid","jarpowder", "@BottleCombine01");
	AddPickupCallback("jarliquid", "@PickUpjarliquid");
	AddPickupCallback("jarpowder", "@PickUpjarpowder");
	
	//note that keys in level01_03_corridor01 can not be combined by hand
	AddCombineCallback("keypart1","keypart2", "@KeyCombine01");
	
//----ROACH INSANE QUESTIONS-------------------
	if(GetGlobalVar("sanity") == 0)
		{
		CreateTimer("SanityT", 1.2f, "@SanityEvent1",false);
		SetGlobalVar("sanity", 1);
		}
}

/*This function is run 60 times a sec*/
void OnUpdate()
{
}

//////////////////////
/*CALLBACK FUNCTIONS*/

//bottle combo
void BottleCombine01(string asItem1, string asItem2, int alSlot)
{
	GiveItem("jaracid","item_chemjar_acid.ent", alSlot);
	
	SetInventoryActive(false);
	AddMessageTrans("Items", "chemjar_Combine");
	
	AddNotebookTask("TaskCombinedBottle", "Tasks","CombinedBottle");
	RemoveNotebookTask("TaskSecondBottle");
	
	RemoveItem("jarliquid");
	RemoveItem("jarpowder");
}
//bottle pickups
void PickUpjarliquid(string asEntity)
{
	AddGlobalVar("bottles", 1);
	if(GetGlobalVar("bottles") == 1)
		{
		AddNotebookTask("TaskFirstBottle", "Tasks","FirstBottle");
		}
	if(GetGlobalVar("bottles") == 2)
		{
		RemoveNotebookTask("TaskFirstBottle");
		AddNotebookTask("TaskSecondBottle", "Tasks","SecondBottle");
		}
}
void PickUpjarpowder(string asEntity)
{
	AddGlobalVar("bottles", 1);
	if(GetGlobalVar("bottles") == 1)
		{
		AddNotebookTask("TaskFirstBottle", "Tasks","FirstBottle");
		}
	if(GetGlobalVar("bottles") == 2)
		{
		RemoveNotebookTask("TaskFirstBottle");
		AddNotebookTask("TaskSecondBottle", "Tasks","SecondBottle");
		}
}
//key combo note
void KeyCombine01(string asItem1, string asItem2, int alSlot)
{
	SetInventoryActive(false);
	AddMessageTrans("Items", "KeyComboFail");
}

//Stop fear from timer
void StopFear(string asTimer)
{
	StopPlayerFearFilter();	
}

//---CALLBACKS FOR SANITY QUESTION
void SanityEvent1(string asTimer)
{
	SetPlayerActive(false);
	SetWideScreenActive(true);
	
	PlayGuiSound("player_heartbeat", 1);
	
	StartPlayerFearFilter(1);
	
	CreateTimer("SanityT2", 0.5f, "@SanityEvent2",false);
	CreateTimer("Beat1", 2, "@BeatEvent1",false);
}
void SanityEvent2(string asTimer)
{
	AddMessageTrans("Sanity", "RoachSanity02");
	SetMessagesOverCallback("@SanityEnd");
	
	StopPlayerFearFilter();	
}
void SanityEnd()
{
	SetWideScreenActive(false);
	SetPlayerActive(true);
}
void BeatEvent1(string asTimer)
{
	PlayGuiSound("player_heartbeat", 0.8);
	CreateTimer("Beat2", 2, "@BeatEvent2",false);
}
void BeatEvent2(string asTimer)
{
	PlayGuiSound("player_heartbeat", 0.6);
	CreateTimer("Beat3", 2, "@BeatEvent3",false);
}
void BeatEvent3(string asTimer)
{
	PlayGuiSound("player_heartbeat", 0.4);
}